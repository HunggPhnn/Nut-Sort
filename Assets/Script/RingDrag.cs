using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(Collider))]
public class RingDrag : MonoBehaviour
{
    private Camera cam;
    private Vector3 originalPosition;
    private Tower originalTower;
    private bool isDragging = false;

    [Header("Drag Settings")]
    public float snapDistance = 3.0f;    // t·ªëi ƒëa kho·∫£ng c√°ch t·ª´ ring t·ªõi ringHoldPoint ƒë·ªÉ snap
    
    [Header("√Çm thanh")]
    public AudioClip placeRingSound;
    Collider myCollider;

    void Start()
    {
        cam = Camera.main;
        myCollider = GetComponent<Collider>();
    }

    void OnMouseDown()
    {
        // L∆∞u v·ªã tr√≠ ban ƒë·∫ßu
        originalPosition = transform.position;

        // T√¨m Tower g·ªëc (n·∫øu ring l√† child c·ªßa ringHoldPoint)
        originalTower = GetComponentInParent<Tower>();

        // Ch·ªâ cho k√©o n·∫øu ring l√† top ring c·ªßa tower g·ªëc
        if (originalTower == null)
        {
            return;
        }

        if (originalTower.GetTopRing() != transform)
        {
            // kh√¥ng ph·∫£i v√≤ng tr√™n c√πng -> kh√¥ng cho k√©o
            return;
        }

        // Remove kh·ªèi tower (c·∫≠p nh·∫≠t danh s√°ch)
        originalTower.RemoveRing(transform);

        // Detach ƒë·ªÉ gi·ªØ v·ªã tr√≠ world
        transform.SetParent(null);

        // Disable collider khi k√©o ƒë·ªÉ tr√°nh ch·∫∑n raycast (t√πy tr∆∞·ªùng h·ª£p)
        if (myCollider != null) myCollider.enabled = false;

        isDragging = true;
    }

    void OnMouseDrag(){
        if (!isDragging) return;

        // T·∫°o m·∫∑t ph·∫≥ng song song v·ªõi camera, ƒëi qua v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ring
        Plane plane = new Plane(cam.transform.forward * -1, transform.position);

        Ray ray = cam.ScreenPointToRay(Input.mousePosition);
        if (plane.Raycast(ray, out float enter)){
        Vector3 hitPoint = ray.GetPoint(enter);
        transform.position = hitPoint; 
        }
    }

    void OnMouseUp()
    {
        if (!isDragging)
        {
            // ƒë·∫£m b·∫£o re-enable collider n·∫øu b·ªã t·∫Øt tr∆∞·ªõc ƒë√≥
            if (myCollider != null && !myCollider.enabled) myCollider.enabled = true;
            return;
        }

        isDragging = false;

        // Re-enable collider
        if (myCollider != null) myCollider.enabled = true;

        // T√¨m tr·ª• g·∫ßn nh·∫•t (b·∫±ng kho·∫£ng c√°ch t·ªõi ringHoldPoint)
        Tower[] all = FindObjectsOfType<Tower>();
        Tower nearest = null;
        float minDist = float.MaxValue;
        Vector3 pos = transform.position;
        foreach (Tower t in all)
        {
            if (t == null || t.ringHoldPoint == null) continue;
            float d = Vector3.Distance(t.ringHoldPoint.position, pos);
            if (d < minDist)
            {
                minDist = d;
                nearest = t;
            }
        }
        // N·∫øu t√¨m ƒë∆∞·ª£c tower trong snapDistance v√† th·ªèa lu·∫≠t -> add v√†o tower ƒë√≥
        if (nearest != null && minDist <= snapDistance)
        {
            bool canPlace = nearest.CanPlaceRing(); 
            if (canPlace)
            {
                nearest.AddRing(transform);

                // üîä ph√°t √¢m thanh khi ƒë·∫∑t v√≤ng
                if (placeRingSound != null && GameManager.instance.audioSource != null)
                {
                    GameManager.instance.audioSource.PlayOneShot(placeRingSound);
                }

                GameManager.instance.CheckWinCondition();
                return;
            }
        }

        // N·∫øu kh√¥ng h·ª£p l·ªá -> tr·∫£ v·ªÅ tr·ª• g·ªëc (n·∫øu c√≥) ho·∫∑c tr·∫£ v·ªÅ v·ªã tr√≠ c≈©
        if (originalTower != null)
        {
            originalTower.AddRing(transform);
        }
        else
        {
            transform.position = originalPosition;
        }
    }
}

